[general]
verbose = False


[bluetooth]
name = Trickler


[scale]
# See the SCALES variable in scales.py for options.
model = and-fx120
# /dev/ttyUSB0 for USB-to-serial or /dev/ttyAMA0 for serial over GPIO.
port = /dev/ttyUSB0
# Usually the max, or default, baudrate supported by your scale.
baudrate = 19200
# Scale timeout in seconds.
timeout = 0.1
# Open trickler version for legacy status mapping. Don't change unless you know what you are doing.
status_map_version = 0


[motors]
trickler_pin = 18
trickler_max_pwm = 100
trickler_min_pwm = 32
#servo_pin = 


[leds]
# https://gpiozero.readthedocs.io/en/stable/recipes_advanced.html#controlling-the-pi-s-own-leds
status_led_pin = 47
active_high = False
enable_status_leds = True
ready_status_led_mode = pulse
running_status_led_mode = on
done_status_led_mode = fast_blink


[PID]
# Higher Kp values will:
# - decrease rise time
# - increase overshoot
# - slightly increase settling time
# - decrease steady-state error
# - degrade stability
Kp = 10
# Higher Ki values will:
# - slightly decrease rise time
# - increase overshoot
# - increase settling time
# - largely decrease steady-state error
# - degrade stability
Ki = 2.3
# Higher Kd values will:
# - slightly decrease rise time
# - decrease overshoot
# - decrease settling time
# - minorly affect steady-state error
# - improve stability
Kd = 3.75
# Enable for use with pidtuner.com
pid_tuner_mode = False


[scale_status_values]
# Supports the first version of OpenTrickler software.
# New version avoids zero (0) which can be confused with null/None.
STABLE = 0
UNSTABLE = 1
OVERLOAD = 2
ERROR = 3
MODEL_NUMBER = 4
SERIAL_NUMBER = 5
ACKNOWLEDGE = 6
